{"filter":false,"title":"ManagementController.php","tooltip":"/app/Http/Controllers/ManagementController.php","undoManager":{"mark":34,"position":34,"stack":[[{"start":{"row":37,"column":3},"end":{"row":679,"column":2},"action":"remove","lines":[" public function getManagementAction($action){","        ","         $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        ","        if($action == 'bookmanager'){","            $categories = Category::all();","            $actions = DB::table('books')","            ->leftJoin('categories', 'books.category', '=', 'categories.id')","            ->where('books.book_status', 1)","            ->get(array('books.*', 'categories.category_name'));","            ","            return view('management.bookmanager', ['actions'=>$actions, 'categories'=>$categories]);","        }","        else if($action == 'itemmanager'){","            //$actions = Items::all();","            $actions = DB::table('items')","                            ->leftJoin('books','items.books_id','=','books.id')","                            ->where('items.item_status', 1)","                            ->get(array('items.id as items_id', 'items.created_at as items_created_at', 'items.updated_at as items_updated_at','items.*',  'books.*'));","            return view('management.itemmanager', ['actions'=>$actions]);","            //return view('management.test', ['vehicleString'=>$actions]);","        }","        else if($action == 'categorymanager'){","            //$actions = Items::all();","            $categories = Category::all();","            return view('management.categorymanager', ['categories'=>$categories]);","            //return view('management.test', ['vehicleString'=>$actions]);","        }","        return view('management');","    }","    ","    /**public function getBooks($id){","        ","        $book = books::where('id',$id)->first();","        $items = new Items();","        $book->items()->save($items);","        ","        return view('management.test', ['id'=>$id]);","        //$actions = books::all();","        //return view('management.bookmanager', ['actions'=>$actions]);","    }**/","    ","    // public function getBookDetail($id){","    //     $actions = books::all();","    //     $book = books::where('id',$id)->first();","    //     return view('management.bookmanager', ['actions'=>$actions, 'book'=>$book]);","    // }","    ","    ","    public function postBookManageAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        //if(isset($request['keyword'])){","            $bookid = $request['bookid'];","            $bookname = $request['bookname'];","            $author = $request['author'];","            $publisher = $request['publisher'];","            $item_category = $request['item_category'];","            $item_sort = $request['item_sort'];","            if($item_sort == 'Book ID'){","                $item_sort = 'books.id';","            }","            else if($item_sort == 'BookName'){","                $item_sort = 'books.bookname';","            }","            ","            $query = \"SELECT books.*,categories.category_name FROM books left join categories on books.category = categories.id WHERE books.book_status = 1\";","            $queryparam = array();","            if($bookid != \"\"){","                $query = $query . \" And books.id = :bookidvariable\";","                $queryparam['bookidvariable']=$bookid;","            }","            if($bookname != \"\"){","                $query = $query . \" And books.bookname = :booknamevariable\";","                $queryparam['booknamevariable']=$bookname;","            }","            if($author != \"\"){","                $query = $query . \" And books.author_name = :author_namevariable\";","                $queryparam['author_namevariable']=$author;","            }","            if($publisher != \"\"){","                $query = $query . \" And books.publisher = :bookpublishervariable\";","                $queryparam['bookpublishervariable']=$publisher;","            }","            if($item_category != \"\"){","                $query = $query . \" And categories.category_name = :categories_namevariable\";","                $queryparam['categories_namevariable']=$item_category;","            }","            if($item_sort != \"\"){","                $query = $query . \" order by \".$item_sort;","            }","","            $actions = DB::select( DB::raw($query), $queryparam);","            $categories = Category::all();","            return view('management.bookmanager', ['actions'=>$actions, 'categories'=>$categories]);","            ","            ","            //return view('management.test', ['actions'=>$actions]);","        //}","        //return redirect()->back();","    }","    ","    public function postAddbookAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","       //return view('management.test', ['vehicleString'=>$request->all()]);","        $this->validate($request,[","            'bookName' => 'required',","            'author' => 'required',","            'publisher' => 'required',","            'version' => 'required|integer',","            'pages' => 'required|integer',","            'year' => 'required|integer',","            'month' => 'required|integer',","        ]);","        $action = new books();","        $action->bookname = $request['bookName'];","        $action->author_name = $request['author'];","        $action->publisher = $request['publisher'];","        $action->pages = $request['pages'];","        $action->version = $request['version'];","        //$action -> publish_date = date('Y-m',strtotime($request['year'].'-'.$request['month']));","        $action -> publish_date = $request['year'].'-'.$request['month'];","        $action -> book_status = 1;","        //$action->category = $request['category'];","        $action->category = $request['categoryid'];","        ","        ","        $file = $request->file('titleimage_add');","        $filename = $request['bookName'].'_'.time().'.jpg';","        if($file){","            Storage::disk('local')->put($filename, File::get($file));","            $action->titleimage = $filename;","        }","        ","        $action -> save();","        return redirect()->route('managementaction',['action'=> 'bookmanager'])->with([","                'success' => 'Book Added!'","            ]);","        //$lastid = $action->id;","        // $actions = DB::table('books')","        //     ->leftJoin('categories', 'books.category', '=', 'categories.id')","        //     ->get(array('books.*', 'categories.category_name'));","        ","        // return response()->json($action);","        ","        //return redirect()->route('managementaction',['action'=> 'bookmanager'])->with('$lastid', $lastid);","    }","    ","    public function postUpdatebookAction(Request $request, $id)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        $this->validate($request,[","            'bookName' => 'required',","            'author' => 'required',","            'publisher' => 'required',","            'version' => 'required|integer',","            'pages' => 'required|integer',","            'year' => 'required|integer',","            'month' => 'required|integer',","        ]);","","        $book = books::where('id',$id)->first();","","        $book->bookname = $request['bookName'];","        $book->author_name = $request['author'];","        $book->publisher = $request['publisher'];","        $book->pages = $request['pages'];","        $book->version = $request['version'];","        //$action -> publish_date = date('Y-m',strtotime($request['year'].'-'.$request['month']));","        $book -> publish_date = $request['year'].'-'.$request['month'];","        //$book->category = $request['category'];","        $book->category = $request['categoryid'];","        ","        ","        $file = $request->file('titleimage_edit');","        $filename = $request['bookName'].'_'.time().'.jpg';","        if($file){","            Storage::disk('local')->put($filename, File::get($file));","            $book->titleimage = $filename;","        }","        $book -> update();","        //return view('management.test', ['vehicleString'=>$book]);","        return redirect()->route('managementaction',['action'=> 'bookmanager'])->with([","                'success' => 'Book Updated!'","            ]);","    }","    ","    ","    public function postDeletebookAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        //$checked = Input::only('checked')['checked'];","        // Do whatever you want with this array","        $item = Items::where('books_id',8)->first();","        if($item == null || $item!=\"\" || count($item) == 0){","            foreach ($request->get('checked') as $booid) {","                $book = books::where('id',$booid)->first();","                $book->book_status = 0;","                $book->update();","            }","        }","        else{","            return Redirect::back()->withErrors([","                'error' => 'Some item is related to this book, please delete those items first'","            ]);","        }","        ","","        return redirect()->route('managementaction',['action'=> 'bookmanager']);","        ","        ","        //$vehicleString = implode(\",\", $request->get('checked'));","        ","        //return view('management.test', ['actions'=>$item]);","    }","    ","    ","    ////////////////////item_actions//////////////////////////","    public function postUpdateitemAction(Request $request, $id)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        $this->validate($request,[","            'price' => 'required|numeric',","            'quantity' => 'required|integer',","            'type' => 'required'","        ]);","        $item = Items::where('id',$id)->first();","        // $this->validate($request,[","        //     'bookName' => 'required',","        //     'author' => 'required',","        //     'publisher' => 'required',","        //     'version' => 'required',","        //     'category' => 'required',","        //     'pages' => 'required',","        //     'year' => 'required',","        //     'month' => 'required'","        // ]);","        $item->price = $request['price'];","        $item->type = $request['type'];","        $item->quantity = $request['quantity'];","        $item -> update();","        //return view('management.test', ['vehicleString'=>$item]);","        return redirect()->route('managementaction',['action'=> 'itemmanager'])->with([","                'success' => 'Book Added!'","            ]);","    }","    ","    public function postItemManageAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        //if(isset($request['keyword'])){","        $itemid = $request['itemid'];","        $bookid = $request['bookid'];","        $bookname = $request['bookname'];","        $author = $request['author'];","        $publisher = $request['publisher'];","        $item_type = $request['item_type'];","        $item_sort = $request['item_sort'];","        ","        if($item_sort = \"item ID\"){","            $item_sort = 'items.id';","        }","        else if($item_sort = \"Book ID\"){","            $item_sort = 'books.id';","        }","        else if($item_sort = \"BookName\"){","            $item_sort = 'books.bookname';","        }","        else if($item_sort = \"Price\"){","            $item_sort = 'items.price';","        }","        ","        $query = \"SELECT items.id as items_id, items.created_at as items_created_at, items.updated_at as items_updated_at, items.*, books.*\";","        $query = $query. \" FROM items left join books on items.books_id = books.id WHERE items.item_status = 1\";","        $queryparam = array();","        if($itemid != \"\"){","            $query = $query . \" And items.id = :itemidvariable\";","            $queryparam['itemidvariable']=$itemid;","        }","        if($bookid != \"\"){","            $query = $query . \" And books.id = :bookidvariable\";","            $queryparam['bookidvariable']=$bookid;","        }","        if($bookname != \"\"){","            $query = $query . \" And books.bookname = :booknamevariable\";","            $queryparam['booknamevariable']=$bookname;","        }","        if($author != \"\"){","            $query = $query . \" And books.author_name = :author_namevariable\";","            $queryparam['author_namevariable']=$author;","        }","        if($publisher != \"\"){","            $query = $query . \" And books.publisher = :bookpublishervariable\";","            $queryparam['bookpublishervariable']=$publisher;","        }","        if($item_type != \"\"){","            $query = $query . \" And items.type = :item_typevariable\";","            $queryparam['item_typevariable']=$item_type;","        }","        if($item_sort != \"\"){","            $query = $query . \" order by \".$item_sort;","        }","","        $actions = DB::select( DB::raw($query), $queryparam);","        ","        return view('management.itemmanager', ['actions'=>$actions]);","            ","            ","        //return view('management.test', ['actions'=>$actions]);","        //}","        //return redirect()->back();","    }","    ","     public function searchBook_itemAction(Request $request)","    {","           $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        $bookid = $request['bookid'];","        $bookName = $request['bookName'];","        ","        $book = \"\";","        if($bookid != null || $bookid != \"\"){","            if($bookName !=null || $bookName != \"\"){","                $book = DB::table('books')","                    ->where('id', $booid)","                    ->where('bookname','LIKE', '%'.$bookName.'%' )","                    ->Where('book_status', 1)","                    ->get();","            }","            else{","                $book = DB::table('books')","                    ->where('id', $booid)","                    ->Where('book_status', 1)","                    ->get();","            }","        }","        else{","            if($bookName !=null || $bookName != \"\"){","                $book = DB::table('books')","                    ->where('bookname','LIKE', '%'.$bookName.'%')","                    ->Where('book_status', 1)","                    ->get();","            }","            else{","                $book = DB::table('books')","                    ->where('id', $booid)","                    ->where('bookname','LIKE', '%'.$bookName.'%')","                    ->Where('book_status', 1)","                    ->get();","            }","        } ","            ","        ","        ","        // $book = DB::table('books')","        //             ->where('bookname', $bookName)","        //             ->Where('book_status', 1)","        //             ->get();","        //$book = books::where('bookname',$bookName)->get();","        return response()->json($book);","        ","        ","        ","        ","        // $item->quantity = $request['quantity'];","        // $item -> update();","        // //return view('management.test', ['vehicleString'=>$item]);","        // return redirect()->route('managementaction',['action'=> 'itemmanager']);","    }","    ","    public function postAdditemAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        //$id = $request->get('optradio');","        $this->validate($request,[","            'price' => 'required|numeric',","            'quantity' => 'required|integer',","            'type' => 'required',","            'optradio' => 'required'","        ]);","        ","        ","        $action = new Items();","        $action->price = $request->get('price');","        $action->quantity = $request->get('quantity');","        $action->type = $request->get('type');","        $action -> item_status = 1;","        $action->books_id = $request->get('optradio');","        $action -> save();","        ","        return redirect()->route('managementaction',['action'=> 'itemmanager'])->with([","                'success' => 'Book Added!'","            ]);","        // $action = new books();","        // $action->bookname = $request['bookName'];","        // $action->author_name = $request['author'];","        // $action->publisher = $request['publisher'];","        // $action->pages = $request['pages'];","        // $action->version = $request['version'];","        // //$action -> publish_date = date('Y-m',strtotime($request['year'].'-'.$request['month']));","        // $action -> publish_date = $request['year'].'-'.$request['month'];","        // $action->category = $request['category'];","        // $action -> save();","        ","        // return redirect()->route('managementaction',['action'=> 'bookmanager']);","       //return view('management.test', ['price'=>$request->get('price'), 'quantity'=>$request->get('quantity'), 'type'=>$request->get('type'), 'vehicleString'=>$id]);","    }","    ","    public function postDeleteitemAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        //$checked = Input::only('checked')['checked'];","        // Do whatever you want with this array","        ","        ","        foreach ($request->get('checked') as $itemid) {","            $item = Items::where('id',$itemid)->first();","            $item -> item_status = 0;","            $item -> update();","            //$item->delete();","        }","","        return redirect()->route('managementaction',['action'=> 'itemmanager']);","        //$vehicleString = implode(\",\", $request->get('checked'));","        ","        //return view('management.test', ['vehicleString'=>$vehicleString]);","    }","    ","    public function postDeletecategoryAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        //$checked = Input::only('checked')['checked'];","        // Do whatever you want with this array","        foreach ($request->get('checked') as $categoryid) {","            $category = Category::where('id',$categoryid)->first();","            $category->delete();","        }","","        return redirect()->route('managementaction',['action'=> 'categorymanager']);","        //$vehicleString = implode(\",\", $request->get('checked'));","        ","        //return view('management.test', ['vehicleString'=>$vehicleString]);","    }","    ","    public function postUpdatecategoryAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","        $id =  $request['categoryid'];","        $category = Category::where('id',$id)->first();","        // $this->validate($request,[","        //     'bookName' => 'required',","        //     'author' => 'required',","        //     'publisher' => 'required',","        //     'version' => 'required',","        //     'category' => 'required',","        //     'pages' => 'required',","        //     'year' => 'required',","        //     'month' => 'required'","        // ]);","        $category->category_name = $request['categoryName'];","","        $category -> update();","        ","        return response()->json('{success:true}');","        ","        //return view('management.test', ['vehicleString'=>$item]);","        //return redirect()->route('managementaction',['action'=> 'itemmanager']);","    }","    ","    public function postAddcategoryAction(Request $request)","    {","          $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }","       //return view('management.test', ['vehicleString'=>$request->all()]);","        $this->validate($request,[","            'categoryName' => 'required'","","        ]);","        $category = new Category();","        $category->category_name = $request['categoryName'];","        ","        $category -> save();","        return redirect()->route('managementaction',['action'=> 'categorymanager']);","        //$lastid = $action->id;","        // $actions = DB::table('books')","        //     ->leftJoin('categories', 'books.category', '=', 'categories.id')","        //     ->get(array('books.*', 'categories.category_name'));","        ","        // return response()->json($action);","        ","        //return redirect()->route('managementaction',['action'=> 'bookmanager'])->with('$lastid', $lastid);","    }","    ","    public function getTitleImage($filename)","    {","        $file = Storage::disk('local')->get($filename);","        return new Response($file, 200);","    }","    ","    ","}","","?>"],"id":191},{"start":{"row":37,"column":3},"end":{"row":487,"column":2},"action":"insert","lines":["public function getManagementAction($action){","        if($action == 'bookmanager'){","            $categories = Category::all();","            $actions = DB::table('books')","            ->leftJoin('categories', 'books.category', '=', 'categories.id')","            ->where('books.book_status', 1)->select('books.*', 'categories.category_name')->paginate(10);","            //->get(array('books.*', 'categories.category_name'));","            ","            return view('management.bookmanager', ['actions'=>$actions, 'categories'=>$categories]);","        }","        else if($action == 'itemmanager'){","            //$actions = Items::all();","            $actions = DB::table('items')","                            ->leftJoin('books','items.books_id','=','books.id')","                            ->where('items.item_status', 1)->select('items.id as items_id', 'items.created_at as items_created_at', 'items.updated_at as items_updated_at','items.*',  'books.*')->paginate(10);","                           // ->get(array('items.id as items_id', 'items.created_at as items_created_at', 'items.updated_at as items_updated_at','items.*',  'books.*'));","            return view('management.itemmanager', ['actions'=>$actions]);","            //return view('management.test', ['vehicleString'=>$actions]);","        }","        else if($action == 'categorymanager'){","            //$actions = Items::all();","            $categories = Category::paginate(8);","            return view('management.categorymanager', ['categories'=>$categories]);","            //return view('management.test', ['vehicleString'=>$actions]);","        }","        return view('management.'.$action);","    }","    ","    /**public function getBooks($id){","        ","        $book = books::where('id',$id)->first();","        $items = new Items();","        $book->items()->save($items);","        ","        return view('management.test', ['id'=>$id]);","        //$actions = books::all();","        //return view('management.bookmanager', ['actions'=>$actions]);","    }**/","    ","    // public function getBookDetail($id){","    //     $actions = books::all();","    //     $book = books::where('id',$id)->first();","    //     return view('management.bookmanager', ['actions'=>$actions, 'book'=>$book]);","    // }","    ","    ","    public function postBookManageAction(Request $request)","    {","        //if(isset($request['keyword'])){","            $bookid = $request['bookid'];","            $bookname = $request['bookname'];","            $author = $request['author'];","            $publisher = $request['publisher'];","            $item_category = $request['item_category'];","            $item_sort = $request['item_sort'];","            if($item_sort == 'Book ID'){","                $item_sort = 'books.id';","            }","            else if($item_sort == 'BookName'){","                $item_sort = 'books.bookname';","            }","            ","            $query = \"SELECT books.*,categories.category_name FROM books left join categories on books.category = categories.id WHERE books.book_status = 1\";","            $queryparam = array();","            if($bookid != \"\"){","                $query = $query . \" And books.id = :bookidvariable\";","                $queryparam['bookidvariable']=$bookid;","            }","            if($bookname != \"\"){","                $query = $query . \" And books.bookname = :booknamevariable\";","                $queryparam['booknamevariable']=$bookname;","            }","            if($author != \"\"){","                $query = $query . \" And books.author_name = :author_namevariable\";","                $queryparam['author_namevariable']=$author;","            }","            if($publisher != \"\"){","                $query = $query . \" And books.publisher = :bookpublishervariable\";","                $queryparam['bookpublishervariable']=$publisher;","            }","            if($item_category != \"\"){","                $query = $query . \" And categories.category_name = :categories_namevariable\";","                $queryparam['categories_namevariable']=$item_category;","            }","            if($item_sort != \"\"){","                $query = $query . \" order by \".$item_sort;","            }","","            $actions = DB::select( DB::raw($query), $queryparam);","            $categories = Category::all();","            return view('management.bookmanager', ['actions'=>$actions, 'categories'=>$categories]);","            ","            ","            //return view('management.test', ['actions'=>$actions]);","        //}","        //return redirect()->back();","    }","    ","    public function postAddbookAction(Request $request)","    {","       //return view('management.test', ['vehicleString'=>$request->all()]);","        $this->validate($request,[","            'bookName' => 'required',","            'author' => 'required',","            'publisher' => 'required',","            'version' => 'required|integer',","            'pages' => 'required|integer',","            'year' => 'required|integer',","            'month' => 'required|integer',","        ]);","        $action = new books();","        $action->bookname = $request['bookName'];","        $action->author_name = $request['author'];","        $action->publisher = $request['publisher'];","        $action->pages = $request['pages'];","        $action->version = $request['version'];","        //$action -> publish_date = date('Y-m',strtotime($request['year'].'-'.$request['month']));","        $action -> publish_date = $request['year'].'-'.$request['month'];","        $action -> book_status = 1;","        $category = Category::where('category_name',$request['category'])->first();","        $categoryid = $category['id'];","        $action->category = $categoryid;","        //$action->category = $request['category'];","        $action->description = $request['description'];","        //$action->category = $request['categoryid'];","        ","        ","        $file = $request->file('titleimage_add');","        $filename = $request['bookName'].'_'.time().'.jpg';","        if($file){","            Storage::disk('local')->put($filename, File::get($file));","            $action->titleimage = $filename;","        }","        ","        $action -> save();","        return redirect()->route('managementaction',['action'=> 'bookmanager'])->with([","                'success' => 'Book Added!'","            ]);","        //$lastid = $action->id;","        // $actions = DB::table('books')","        //     ->leftJoin('categories', 'books.category', '=', 'categories.id')","        //     ->get(array('books.*', 'categories.category_name'));","        ","        // return response()->json($action);","        ","        //return redirect()->route('managementaction',['action'=> 'bookmanager'])->with('$lastid', $lastid);","    }","    ","    public function postUpdatebookAction(Request $request, $id)","    {","        $this->validate($request,[","            'bookName' => 'required',","            'author' => 'required',","            'publisher' => 'required',","            'version' => 'required|integer',","            'pages' => 'required|integer',","            'year' => 'required|integer',","            'month' => 'required|integer',","        ]);","","        $book = books::where('id',$id)->first();","","        $book->bookname = $request['bookName'];","        $book->author_name = $request['author'];","        $book->publisher = $request['publisher'];","        $book->pages = $request['pages'];","        $book->version = $request['version'];","        //$action -> publish_date = date('Y-m',strtotime($request['year'].'-'.$request['month']));","        $book -> publish_date = $request['year'].'-'.$request['month'];","        //$book->category = $request['category'];","        //$book->category = $request['categoryid'];","        //$categoryid = Category::where('')","        $category = Category::where('category_name',$request['category'])->first();","        $categoryid = $category['id'];","        $book->category = $categoryid;","        $book->description = $request['description'];","        ","        ","        $file = $request->file('titleimage_edit');","        $filename = $request['bookName'].'_'.time().'.jpg';","        if($file){","            Storage::disk('local')->put($filename, File::get($file));","            $book->titleimage = $filename;","        }","        $book -> update();","        //return view('management.test', ['vehicleString'=>$book]);","        return redirect()->route('managementaction',['action'=> 'bookmanager'])->with([","                'success' => 'Book Updated!'","            ]);","    }","    ","    ","    public function postDeletebookAction(Request $request)","    {","        //$checked = Input::only('checked')['checked'];","        // Do whatever you want with this array","        $this->validate($request,[","            'checked' => 'required'","        ]);","        ","        foreach ($request->get('checked') as $bookid) {","            $item = Items::where('books_id',$bookid)->first();","            $item = DB::table('items')","            ->where('items.books_id', $bookid)","            ->where('items.item_status', 1)","            ->get(array('items.*'));","            if($item == null){","                // return redirect()->back()->withErrors([","                //     'error' => 'Just test '.$bookid","                // ]);","                foreach ($request->get('checked') as $booid) {","                    $book = books::where('id',$booid)->first();","                    $book->book_status = 0;","                    $book->update();","                }","            }","            else{","                return redirect()->back()->withErrors([","                    'error' => 'Some item is related to this book, please go to itemmanage page find and delete those items first'","                ]);","            }","            //$item->delete();","        }","","        return redirect()->route('managementaction',['action'=> 'bookmanager']);","        ","    }","    ","    ","    ////////////////////item_actions//////////////////////////","    public function postUpdateitemAction(Request $request, $id)","    {","        $this->validate($request,[","            'price' => 'required|numeric',","            'quantity' => 'required|integer',","            'type' => 'required'","        ]);","        $item = Items::where('id',$id)->first();","        // $this->validate($request,[","        //     'bookName' => 'required',","        //     'author' => 'required',","        //     'publisher' => 'required',","        //     'version' => 'required',","        //     'category' => 'required',","        //     'pages' => 'required',","        //     'year' => 'required',","        //     'month' => 'required'","        // ]);","        $item->price = $request['price'];","        $item->type = $request['type'];","        $item->quantity = $request['quantity'];","        $item -> update();","        //return view('management.test', ['vehicleString'=>$item]);","        return redirect()->route('managementaction',['action'=> 'itemmanager'])->with([","                'success' => 'Item Updated!'","            ]);","    }","    ","    public function postItemManageAction(Request $request)","    {","        //if(isset($request['keyword'])){","        $itemid = $request['itemid'];","        $bookid = $request['bookid'];","        $bookname = $request['bookname'];","        $author = $request['author'];","        $publisher = $request['publisher'];","        $item_type = $request['item_type'];","        $item_sort = $request['item_sort'];","        ","        if($item_sort = \"item ID\"){","            $item_sort = 'items.id';","        }","        else if($item_sort = \"Book ID\"){","            $item_sort = 'books.id';","        }","        else if($item_sort = \"BookName\"){","            $item_sort = 'books.bookname';","        }","        else if($item_sort = \"Price\"){","            $item_sort = 'items.price';","        }","        ","        $query = \"SELECT items.id as items_id, items.created_at as items_created_at, items.updated_at as items_updated_at, items.*, books.*\";","        $query = $query. \" FROM items left join books on items.books_id = books.id WHERE items.item_status = 1\";","        $queryparam = array();","        if($itemid != \"\"){","            $query = $query . \" And items.id = :itemidvariable\";","            $queryparam['itemidvariable']=$itemid;","        }","        if($bookid != \"\"){","            $query = $query . \" And books.id = :bookidvariable\";","            $queryparam['bookidvariable']=$bookid;","        }","        if($bookname != \"\"){","            $query = $query . \" And books.bookname = :booknamevariable\";","            $queryparam['booknamevariable']=$bookname;","        }","        if($author != \"\"){","            $query = $query . \" And books.author_name = :author_namevariable\";","            $queryparam['author_namevariable']=$author;","        }","        if($publisher != \"\"){","            $query = $query . \" And books.publisher = :bookpublishervariable\";","            $queryparam['bookpublishervariable']=$publisher;","        }","        if($item_type != \"\"){","            $query = $query . \" And items.type = :item_typevariable\";","            $queryparam['item_typevariable']=$item_type;","        }","        if($item_sort != \"\"){","            $query = $query . \" order by \".$item_sort;","        }","","        $actions = DB::select( DB::raw($query), $queryparam);","        ","        return view('management.itemmanager', ['actions'=>$actions]);","            ","            ","        //return view('management.test', ['actions'=>$actions]);","        //}","        //return redirect()->back();","    }","    ","     public function searchBook_itemAction(Request $request)","    {","         ","        $bookid = $request['bookid'];","        $bookName = $request['bookName'];","        ","        $query = \"SELECT books.* FROM books WHERE books.book_status = 1\";","        $queryparam = array();","        if($bookid != \"\"){","            $query = $query . \" And books.id = :bookidvariable\";","            $queryparam['bookidvariable']=$bookid;","        }","        if($bookName != \"\"){","            $query = $query . \" And books.bookname = :booknamevariable\";","            $queryparam['booknamevariable']=$bookname;","        }","","        $book = DB::select( DB::raw($query), $queryparam);","        return response()->json($book);","        ","    }","    ","    public function postAdditemAction(Request $request)","    {","        //$id = $request->get('optradio');","        $this->validate($request,[","            'price' => 'required|numeric',","            'quantity' => 'required|integer',","            'type' => 'required',","            'optradio' => 'required'","        ]);","        ","        ","        $action = new Items();","        $action->price = $request->get('price');","        $action->quantity = $request->get('quantity');","        $action->type = $request->get('type');","        $action -> item_status = 1;","        $action->books_id = $request->get('optradio');","        $action -> save();","        ","        return redirect()->route('managementaction',['action'=> 'itemmanager'])->with([","                'success' => 'Item Added!'","            ]);","        // $action = new books();","        // $action->bookname = $request['bookName'];","        // $action->author_name = $request['author'];","        // $action->publisher = $request['publisher'];","        // $action->pages = $request['pages'];","        // $action->version = $request['version'];","        // //$action -> publish_date = date('Y-m',strtotime($request['year'].'-'.$request['month']));","        // $action -> publish_date = $request['year'].'-'.$request['month'];","        // $action->category = $request['category'];","        // $action -> save();","        ","        // return redirect()->route('managementaction',['action'=> 'bookmanager']);","       //return view('management.test', ['price'=>$request->get('price'), 'quantity'=>$request->get('quantity'), 'type'=>$request->get('type'), 'vehicleString'=>$id]);","    }","    ","    public function postDeleteitemAction(Request $request)","    {","        //$checked = Input::only('checked')['checked'];","        // Do whatever you want with this array","        $this->validate($request,[","            'checked' => 'required'","        ]);","        ","        foreach ($request->get('checked') as $itemid) {","            $item = Items::where('id',$itemid)->first();","            $item -> item_status = 0;","            $item -> update();","            //$item->delete();","        }","","        return redirect()->route('managementaction',['action'=> 'itemmanager']);","        //$vehicleString = implode(\",\", $request->get('checked'));","        ","        //return view('management.test', ['vehicleString'=>$vehicleString]);","    }","    ","    public function postDeletecategoryAction(Request $request)","    {","        $this->validate($request,[","            'checked' => 'required'","        ]);","        //$checked = Input::only('checked')['checked'];","        // Do whatever you want with this array","        foreach ($request->get('checked') as $categoryid) {","            $category = Category::where('id',$categoryid)->first();","            $category->delete();","        }","    }","    ","    public function postUpdatecategoryAction(Request $request)","    {","        $id =  $request['categoryid'];","","        $category->category_name = $request['categoryName'];","","        $category -> update();","        ","        return response()->json('{success:true}');","        ","    }","    ","    public function postAddcategoryAction(Request $request)","    {","        $this->validate($request,[","            'categoryName' => 'required'","","        ]);","        $category = new Category();","        $category->category_name = $request['categoryName'];","        ","        $category -> save();","        return redirect()->route('managementaction',['action'=> 'categorymanager']);","    }","    ","    public function getTitleImage($filename)","    {","        $file = Storage::disk('local')->get($filename);","        return new Response($file, 200);","    }","    ","    ","}","","?>"]}],[{"start":{"row":37,"column":48},"end":{"row":38,"column":0},"action":"insert","lines":["",""],"id":192},{"start":{"row":38,"column":0},"end":{"row":38,"column":7},"action":"insert","lines":["       "]}],[{"start":{"row":38,"column":7},"end":{"row":48,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":193}],[{"start":{"row":95,"column":5},"end":{"row":96,"column":0},"action":"insert","lines":["",""],"id":194},{"start":{"row":96,"column":0},"end":{"row":96,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":96,"column":8},"end":{"row":106,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":195}],[{"start":{"row":158,"column":5},"end":{"row":159,"column":0},"action":"insert","lines":["",""],"id":196},{"start":{"row":159,"column":0},"end":{"row":159,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":159,"column":8},"end":{"row":169,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":197}],[{"start":{"row":219,"column":5},"end":{"row":220,"column":0},"action":"insert","lines":["",""],"id":198},{"start":{"row":220,"column":0},"end":{"row":220,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":220,"column":8},"end":{"row":230,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":199}],[{"start":{"row":274,"column":5},"end":{"row":275,"column":0},"action":"insert","lines":["",""],"id":200},{"start":{"row":275,"column":0},"end":{"row":275,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":275,"column":8},"end":{"row":285,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":201}],[{"start":{"row":323,"column":5},"end":{"row":324,"column":0},"action":"insert","lines":["",""],"id":202},{"start":{"row":324,"column":0},"end":{"row":324,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":324,"column":8},"end":{"row":334,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":203}],[{"start":{"row":362,"column":5},"end":{"row":363,"column":0},"action":"insert","lines":["",""],"id":204},{"start":{"row":363,"column":0},"end":{"row":363,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":363,"column":8},"end":{"row":373,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":205}],[{"start":{"row":438,"column":5},"end":{"row":439,"column":0},"action":"insert","lines":["",""],"id":206},{"start":{"row":439,"column":0},"end":{"row":439,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":439,"column":8},"end":{"row":449,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":207}],[{"start":{"row":471,"column":5},"end":{"row":472,"column":0},"action":"insert","lines":["",""],"id":208},{"start":{"row":472,"column":0},"end":{"row":472,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":472,"column":8},"end":{"row":482,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":209}],[{"start":{"row":519,"column":5},"end":{"row":520,"column":0},"action":"insert","lines":["",""],"id":210},{"start":{"row":520,"column":0},"end":{"row":520,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":520,"column":8},"end":{"row":530,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":211}],[{"start":{"row":551,"column":5},"end":{"row":552,"column":0},"action":"insert","lines":["",""],"id":212},{"start":{"row":552,"column":0},"end":{"row":552,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":552,"column":8},"end":{"row":562,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":213}],[{"start":{"row":575,"column":5},"end":{"row":576,"column":0},"action":"insert","lines":["",""],"id":214},{"start":{"row":576,"column":0},"end":{"row":576,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":576,"column":8},"end":{"row":586,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":215}],[{"start":{"row":598,"column":5},"end":{"row":599,"column":0},"action":"insert","lines":["",""],"id":216},{"start":{"row":599,"column":0},"end":{"row":599,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":599,"column":8},"end":{"row":609,"column":12},"action":"insert","lines":["    $value =(int)Session::get('usertype');","          if(!Auth::check())","       {","            return redirect()->route('user.login');","          ","        }","        ","          if($value==1)","           {","            return redirect()->route('user.login');","           }"],"id":217}],[{"start":{"row":65,"column":13},"end":{"row":65,"column":14},"action":"remove","lines":["/"],"id":218}],[{"start":{"row":65,"column":12},"end":{"row":65,"column":13},"action":"remove","lines":["/"],"id":219}],[{"start":{"row":64,"column":12},"end":{"row":64,"column":13},"action":"insert","lines":["/"],"id":220}],[{"start":{"row":64,"column":13},"end":{"row":64,"column":14},"action":"insert","lines":["/"],"id":221}],[{"start":{"row":65,"column":12},"end":{"row":65,"column":13},"action":"insert","lines":["/"],"id":222}],[{"start":{"row":65,"column":13},"end":{"row":65,"column":14},"action":"insert","lines":["/"],"id":223}],[{"start":{"row":64,"column":13},"end":{"row":64,"column":14},"action":"remove","lines":["/"],"id":224}],[{"start":{"row":64,"column":12},"end":{"row":64,"column":13},"action":"remove","lines":["/"],"id":225}]]},"ace":{"folds":[],"scrolltop":674,"scrollleft":0,"selection":{"start":{"row":65,"column":14},"end":{"row":65,"column":74},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1461912072072,"hash":"0a54738ade41b42442196a716d8f20ae0238ac17"}